定义
1 function fname(x) {...}

js中函数是对象，所以可以赋值给变量
2 fname = function(x) {...}; 

* JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：
function foo(x)
{
    for (var i=0;i<arguments.length;i++ )
    {...}
}

* rest关键字 字面理解为剩余的
作用是获取参数列表中 形参没有定义的 剩余的参数
{{{ 
function foo(a,b,...rest)
{
   console.log('a=',+a);
   console.log('b=',+b);
   console.log(rest);
}
foo(1,2,3,4,5);
// 结果:
// a = 1
// b = 2
// Array [ 3, 4, 5 ]
foo(1)
// 结果:
// a = 1
// b = undefined
// Array [];
}}}
forin
var o = {
    name: 'Jack',
    age: 20,
    city: 'Beijing'
};
for (var key in o) {
    if (o.hasOwnProperty(key)) {
        console.log(key); // 'name', 'age', 'city'
    }
}

变量提升
JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部
function foo() {
    var x = 'Hello, ' + y;
    console.log(x);
    var y = 'Bob';
}
等价于
function foo() {
    var y; // 提升变量y的申明，此时y为undefined
    var x = 'Hello, ' + y;
    console.log(x);
    y = 'Bob';
}
好习惯
将变量声明全部放在函数首部
function foo() {
    var
        x = 1, // x初始化为1
        y = x + 1, // y初始化为2
        z, i; // z和i为undefined
    // 其他语句:
    for (i=0; i<100; i++) {
        ...
    }
}
window全局对象，根对象

javascript变量作用域
js设计的块级作用域和c不同，其变量作用域在函数内部
function foo() {
    for (var i=0; i<100; i++) {
        //
    }
    i += 100; // 仍然可以引用变量i
}
为了解决块级作用域引入let代替var
function foo() {
    var sum = 0;
    for (let i=0; i<100; i++) {
        sum += i;
    }
    // SyntaxError:
    i += 1;
}

解构赋值
var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678',
    school: 'No.4 middle school'
};
var {name, age, passport} = person;
// name, age, passport分别被赋值为对应属性:
console.log('name = ' + name + ', age = ' + age + ', passport = ' + passport);

对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的
var x=1, y=2;
[x, y] = [y, x]

快速获取当前页面的域名和路径：
var {hostname:domain, pathname:path} = location;


this
在一个方法内部，this是一个特殊变量，它始终指向当前对象
在函数内部定义的函数，this又指向undefined了
var xiaoming = {
    name: 'xiaoming',
    birth: 1990,
    age: function () {
        function getAgeFromBirth(){
            var y = new Date().getFullYear();
            return y - this.birth;//这里的this就未定义了
        }
        return getAgeFromBirth();
    }
}
apply 用来指定this的指向
要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
为了不让函数中的函数内的this只想window that捕获this传入下层使用

map高阶函数
对数组使用map
var arr = [1,2,3];
arr.map(String); 对arr中的所有元素使用String函数，返回一个新的结果数组
reduce
Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：
[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)

立即执行函数
(function (x) {
    return x * x;
})(3);
括号中的返回一个匿名函数，后一个括号给他传参


